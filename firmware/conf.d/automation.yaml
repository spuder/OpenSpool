---
script:
- id: preview_rfid_data
  then:
  - text_sensor.template.publish:
      id: nfc_preview
      state: !lambda |-
        id(filament_color_hexaa).publish_state(id(filament_color_hex).state + id(filament_alpha).state);
        auto pretty_json = [=]() -> std::string {
          JsonDocument doc;
          JsonObject root = doc.to<JsonObject>();

          root["version"] = "1.0";
          root["protocol"] = "openspool";          
          if (id(filament_include_alpha).state == true){
            root["color_hex"] = id(filament_color_hexaa).state.c_str();   
          }
          else{
            root["color_hex"] = id(filament_color_hex).state.c_str();
          } 
          root["type"] = id(filament_type).state.c_str();
          root["min_temp"] = id(filament_min_temp).state;
          root["max_temp"] = id(filament_max_temp).state;
          root["brand"] = id(filament_brand).state.c_str();          

          std::string output;
          serializeJsonPretty(doc, output);
          return output;
        };
        return pretty_json();
- id: publish_filament_setting
  then:
  - if:
      condition:
        and:
        - lambda: |-
            if (id(filament_brand).state == "" || id(filament_brand).state == "Unknown") {
              ESP_LOGE("main", "Filament Brand cannot be empty");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(filament_brand_code).state == "" || id(filament_brand_code).state == "Unknown") {
              ESP_LOGE("main", "Filament Brand Code cannot be empty");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(filament_color_hex).state == "") {
              ESP_LOGE("main", "Filament Color Hex cannot be empty");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(filament_max_temp).state >= 300) {
              ESP_LOGE("main", "Filament Min Temp must be less than 300");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(filament_min_temp).state <= 150) {
              ESP_LOGE("main", "Filament Max Temp must be greater than 150");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(filament_type).state == "") {
              ESP_LOGE("main", "Filament Type cannot be empty");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(filament_type).state == "") {
              ESP_LOGE("main", "Filament Type cannot be empty");
              return false;
            } else {
              return true;
            }
        - lambda: |-
            if (id(bambu_serial_number).state == "") {
              ESP_LOGE("main", "Bambu Serial Number cannot be empty");
              return false;
            } else {
              return true;
            }
          # TODO: Check if mqtt is enabled once this is merged: https://github.com/esphome/esphome/pull/7716
      then:
      - mqtt.publish:
          # topic: device/${bambu_serial_number}/request
          topic: !lambda 'return "device/" + id(bambu_serial_number).state + "/request";'
          payload: !lambda |-
            auto data = json::build_json([=](JsonObject root) {
              auto print = root["print"].to<JsonObject>();
              print["sequence_id"] = "0";
              print["command"] = "ams_filament_setting";
              print["ams_id"] = 255; //TODO: support multiple AMS
              print["tray_id"] = 254; //TODO: support multiple trays
              if (id(filament_include_alpha).state == true){
                print["tray_color"] = id(filament_color_hexaa).state;
              }
              else{
                std::string color = id(filament_color_hex).state + "FF";
                print["tray_color"] = color;
              } 
              print["nozzle_temp_min"] = int8_t(id(filament_min_temp).state);
              print["nozzle_temp_max"] = int8_t(id(filament_max_temp).state);
              print["tray_type"] = id(filament_type).state.c_str();
              print["setting_id"] = "";
              print["tray_info_idx"] = id(filament_brand_code).state.c_str();
              print["tray_type"] = id(filament_type).state.c_str();
              //print["tray_sub_brands"] = "TPU"; //TODO: support sub brands

            });
            ESP_LOGI("main", "Publishing %s", data.c_str());
            return data;
- id: generate_filament_brand_code # TODO: Replace with filament_mappings()
  then:
  - lambda: |-
      id(filament_sub_brand).publish_state("");
      // TPU
      if (id(filament_type).state == "TPU") {
        if (id(filament_brand).state == "Bambu") {
          id(filament_brand_code).publish_state("GFU01");
          id(filament_sub_brand).publish_state("TPU 95A");
        } else { // Generic
          id(filament_brand_code).publish_state("GFU99");
          id(filament_sub_brand).publish_state("TPU");
        }
      }
      // PLA
      else if (id(filament_type).state == "PLA") {
        if (id(filament_brand).state == "PolyTerra") {
          id(filament_brand_code).publish_state("GFL01");
          id(filament_sub_brand).publish_state("PolyTerra PLA");
        } else if (id(filament_brand).state == "PolyLite") {
          id(filament_brand_code).publish_state("GFL00");
          id(filament_sub_brand).publish_state("PolyLite PLA");
        } else if (id(filament_brand).state == "Sunlu") {          
          // Check for Sunlu PLA variants
          if (id(filament_variant).state == "Basic") {
            id(filament_brand_code).publish_state("GFSNL03"); 
            id(filament_sub_brand).publish_state("PLA Basic");
          } else if (id(filament_variant).state == "Marble") {
            id(filament_brand_code).publish_state("GFSNL06");
            id(filament_sub_brand).publish_state("PLA Marble");
          } else if (id(filament_variant).state == "Matte") {
            id(filament_brand_code).publish_state("GFSNL02");
            id(filament_sub_brand).publish_state("PLA Matte");
          } else if (id(filament_variant).state == "Silk") {
            id(filament_brand_code).publish_state("GFSNL05");
            id(filament_sub_brand).publish_state("PLA Silk");
          } else if (id(filament_variant).state == "Wood") {
            id(filament_brand_code).publish_state("GFSNL07");
            id(filament_sub_brand).publish_state("PLA Wood");
          } else { // Default to Basic if no variant specified
            id(filament_brand_code).publish_state("GFSNL03");
            id(filament_sub_brand).publish_state("PLA Basic");
          }
        } else if (id(filament_brand).state == "Bambu") {
          // Check for Bambu PLA variants
          if (id(filament_variant).state == "Basic") {
            id(filament_brand_code).publish_state("GFA00");
            id(filament_sub_brand).publish_state("PLA Basic");
          } else if (id(filament_variant).state == "Matte") {
            id(filament_brand_code).publish_state("GFA01");
            id(filament_sub_brand).publish_state("PLA Matte");
          } else if (id(filament_variant).state == "Metal") {
            id(filament_brand_code).publish_state("GFA02");
            id(filament_sub_brand).publish_state("PLA Metal");
          } else if (id(filament_variant).state == "Impact") {
            id(filament_brand_code).publish_state("GFA03");
            id(filament_sub_brand).publish_state("PLA Impact");
          } else { // Default to Basic if no variant specified
            id(filament_brand_code).publish_state("GFA00");
            id(filament_sub_brand).publish_state("PLA Basic");
          }
        } else { // Generic
          id(filament_brand_code).publish_state("GFL99");
          id(filament_sub_brand).publish_state("PLA");
        }
      }
      // PLA High Speed
      else if (id(filament_type).state == "PLA High Speed") {
        // Generic
        id(filament_brand_code).publish_state("GFL95");
        id(filament_sub_brand).publish_state("PLA High Speed");
      }
      // PETG
      else if (id(filament_type).state == "PETG") {
        if (id(filament_brand).state == "Overture") {
          // TODO: find overture PETG brand code
          id(filament_brand_code).publish_state("GFG99"); // Using generic for now
          id(filament_sub_brand).publish_state("PETG");
        } else if (id(filament_brand).state == "Sunlu") {
          id(filament_brand_code).publish_state("GFSNL08");  
        } else { // Generic
          id(filament_brand_code).publish_state("GFG99");
          id(filament_sub_brand).publish_state("PETG");
        }
      }
      // PET-CF
      else if (id(filament_type).state == "PET-CF") {
        if (id(filament_brand).state == "Bambu") {
          id(filament_brand_code).publish_state("GFT00");
          id(filament_sub_brand).publish_state("PET-CF");
        } else { // Generic - Note: Using PETG generic as there's no specific PET-CF generic code
          id(filament_brand_code).publish_state("GFG99");
          id(filament_sub_brand).publish_state("PET-CF");
        }
      }
      // ASA
      else if (id(filament_type).state == "ASA") {
        // Generic
        id(filament_brand_code).publish_state("GFB98");
        id(filament_sub_brand).publish_state("ASA");
      }
      // ABS
      else if (id(filament_type).state == "ABS") {
        if (id(filament_brand).state == "Bambu") {
          id(filament_brand_code).publish_state("GFB00");
          id(filament_sub_brand).publish_state("ABS");
        } else { // Generic
          id(filament_brand_code).publish_state("GFB99");
          id(filament_sub_brand).publish_state("ABS");
        }
      }
      // PC
      else if (id(filament_type).state == "PC") {
        if (id(filament_brand).state == "Bambu") {
          id(filament_brand_code).publish_state("GFC00");
          id(filament_sub_brand).publish_state("PC");
        } else { // Generic
          id(filament_brand_code).publish_state("GFC99");
          id(filament_sub_brand).publish_state("PC");
        }
      }
      // PA
      else if (id(filament_type).state == "PA") {
        // Generic
        id(filament_brand_code).publish_state("GFN99");
        id(filament_sub_brand).publish_state("PA");
      }
      // PA-CF
      else if (id(filament_type).state == "PA-CF") {
        if (id(filament_brand).state == "Bambu") {
          id(filament_brand_code).publish_state("GFN03");
          id(filament_sub_brand).publish_state("PA-CF");
        } else { // Generic
          id(filament_brand_code).publish_state("GFN98");
          id(filament_sub_brand).publish_state("PA-CF");
        }
      }
      // PLA-CF
      else if (id(filament_type).state == "PLA-CF") {
        // Generic
        id(filament_brand_code).publish_state("GFL98");
        id(filament_sub_brand).publish_state("PLA-CF");
      }
      // PVA
      else if (id(filament_type).state == "PVA") {
        // Generic
        id(filament_brand_code).publish_state("GFS99");
        id(filament_sub_brand).publish_state("PVA");
      }
      // Support Materials
      else if (id(filament_type).state == "Support") {
        if (id(filament_variant).state == "G") {
          id(filament_brand_code).publish_state("GFS01");
          id(filament_sub_brand).publish_state("Support G");
        } else if (id(filament_variant).state == "W") {
          id(filament_brand_code).publish_state("GFS00");
          id(filament_sub_brand).publish_state("Support W");
        } else { // Default to Support W if no variant specified
          id(filament_brand_code).publish_state("GFS00");
          id(filament_sub_brand).publish_state("Support W");
        }
      }
      else {
        ESP_LOGE("main", "Unknown filament type: %s", id(filament_type).state.c_str());
      }
- id: generate_filament_temperatures
  then:
  - if:
      condition:
        and:
        - lambda: |-
            if (id(filament_type).state == "") {
              ESP_LOGD("main", "skipping generate_filament_temperatures because filament_type is emptry");
              return false;
            } else {
              return true;
            }
      then:
      - lambda: |-
          //TODO: add filament_variant temperatures
          if (id(filament_type).state == "TPU") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(200);
              id(filament_max_temp).publish_state(250);
            } else {
              ESP_LOGW("main", "Unknown temperatures for TPU: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(200);
              id(filament_max_temp).publish_state(250);
            }
          }
          else if (id(filament_type).state == "PLA" || id(filament_type).state == "PLA High Speed") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            } else if (id(filament_brand).state == "Sunlu") {
                if (id(filament_variant).state == "Basic"){
                  id(filament_min_temp).publish_state(190);
                  id(filament_max_temp).publish_state(240);
                } else if (id(filament_variant).state == "Matte"){
                  id(filament_min_temp).publish_state(205);
                  id(filament_max_temp).publish_state(245);
                } else if (id(filament_variant).state == "Marble"){
                  id(filament_min_temp).publish_state(190);
                  id(filament_max_temp).publish_state(260);
                } else if (id(filament_variant).state == "Silk"){
                  id(filament_min_temp).publish_state(190);
                  id(filament_max_temp).publish_state(240);
                } else if (id(filament_variant).state == "Wood"){
                  id(filament_min_temp).publish_state(195);
                  id(filament_max_temp).publish_state(260);
                } else {
                ESP_LOGW("main", "Unknown temperatures for Variant: %s", id(filament_variant).state.c_str());
                id(filament_min_temp).publish_state(190);
                id(filament_max_temp).publish_state(240);
            }

            } else {
              ESP_LOGW("main", "Unknown temperatures for PLA: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            }
          }
          else if (id(filament_type).state == "PETG") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(220);
              id(filament_max_temp).publish_state(270);
            } else {
              ESP_LOGW("main", "Unknown temperatures for PETG: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(220);
              id(filament_max_temp).publish_state(270);
            }
          }
          else if (id(filament_type).state == "ASA") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(240);
              id(filament_max_temp).publish_state(280);
            } else {
              ESP_LOGW("main", "Unknown temperatures for ASA: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(240);
              id(filament_max_temp).publish_state(280);
            }
          }
          else if (id(filament_type).state == "ABS") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(240);
              id(filament_max_temp).publish_state(280);
            } else {
              ESP_LOGW("main", "Unknown temperatures for ABS: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(240);
              id(filament_max_temp).publish_state(280);
            }
          }
          else if (id(filament_type).state == "PVA") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            } else {
              ESP_LOGW("main", "Unknown temperatures for PVA: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            }
          }
          else if (id(filament_type).state == "PA-CF") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            } else {
              ESP_LOGW("main", "Unknown temperatures for PA-CF: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            }
          }
          else if (id(filament_type).state == "PC") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(260);
              id(filament_max_temp).publish_state(290);
            } else {
              ESP_LOGW("main", "Unknown temperatures for PC: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(260);
              id(filament_max_temp).publish_state(290);
            }
          }
          else if (id(filament_type).state == "PA") {
            if (id(filament_brand).state == "Generic") {
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            } else {
              ESP_LOGW("main", "Unknown temperatures for PA: %s", id(filament_brand).state.c_str());
              id(filament_min_temp).publish_state(190);
              id(filament_max_temp).publish_state(240);
            }
          }
          else {
            ESP_LOGW("main", "Unknown filament type: %s", id(filament_type).state.c_str());
          }

esphome:
  includes:
  - bambu.h

binary_sensor:
- id: rfid_reader_spi_0_tag_parsed
  platform: template
  internal: true
  state_topic:
- id: rfid_reader_spi_0_tag_is_openspool
  platform: template
  internal: true
  state_topic:
