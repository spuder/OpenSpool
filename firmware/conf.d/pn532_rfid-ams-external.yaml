---
substitutions:
  spi_data_rate: 200kHz
  # spi_data_rate: 1Mhz #TODO: decrease this to increase reliability for long cable runs
  # update_interval: "500ms"
  # update_interval: "2s"
  # update_interval: "1s"
  # update_interval: "1500ms"
  update_interval: "750ms"

globals:
  - id: global_tap_counter
    type: int
    restore_value: no
    initial_value: '0'
  - id: global_error
    type: bool
    restore_value: no
    initial_value: 'false'

interval:
  - id: tap_timer
    interval: 1500ms
    startup_delay: 3s
    then:
      - lambda: |-
          if(id(global_tap_counter) == 5) {
            auto disable_rainbow = id(neopixel_light).turn_on();
            disable_rainbow.set_effect("none");
            disable_rainbow.perform();
          } else{
            id(set_led_green).execute(id(global_tap_counter));
          }
          
          id(global_tap_counter) += 1;
          if(id(global_tap_counter) == 5) {
            id(set_led_rainbow).execute();
          }
          if (id(global_tap_counter) > 5) {
            id(global_tap_counter) = 0;  // Reset to 0 (all white LEDs)
            for(int i = 0; i < 4; i++) {
              id(set_led_white).execute(i);
            }
          }
          ESP_LOGD("NFC", "Counter incremented: %d", id(global_tap_counter));

binary_sensor:
- platform: template
  name: "NFC Tag Present"
  id: nfc_tag_present0
  state_topic:
  icon: mdi:circle-double
  web_server:
    sorting_group_id: sorting_group_rfid
spi:
# On esp32-s3 SPI2 a can support 6 devices, whereas only 3 on bus SPI3
- id: SPI2
  clk_pin: ${spi2_clk_pin} # SCK
  miso_pin: ${spi2_miso_pin} # MO/SDA/TX (MISO)
  mosi_pin: ${spi2_mosi_pin} # M (MOSI)
  interface: ${spi2_type}
pn532_spi:
- id: rfid_reader_spi_0
  cs_pin: ${rfid0_ss_pin} # NSS/SCL/RX
  spi_id: ${rfid0_spi_interface}
  data_rate: ${spi_data_rate}
  update_interval: ${update_interval}
  on_tag_removed:
    then:
    - component.suspend: tap_timer
    - binary_sensor.template.publish:
        id: nfc_tag_present0
        state: OFF
    - light.turn_on:
        id: neopixel_light
        effect: none
    # - script.execute:
    #     id: set_led_white
    #     led_number: -1
    - delay: 500ms
    - lambda: |-
        id(tap_timer).setup();
        if(id(global_error) == false) {
          if(id(global_tap_counter) == 5){
            id(set_led_rainbow).execute();
          } else{
              for(int i = 0; i < id(global_tap_counter); i++) {
                id(set_led_green).execute(i);
              }
          }
        }
    - delay: 500ms
    - light.turn_on:
        id: neopixel_light
        effect: none
    - script.execute:
        id: set_led_white
        led_number: -1
    - if:
        condition:
          and:
          - lambda: 'return id(global_error) == false;'
          - lambda: 'return id(global_tap_counter) > 0;'
          - ${mqtt}.connected
          - lambda: 'return id(filament_raw_data0).state != "";'
          - lambda: 'return id(filament_raw_data0).state != "{}";'
          - binary_sensor.is_on: rfid_reader_spi_0_tag_is_openspool
          - binary_sensor.is_on: rfid_reader_spi_0_tag_parsed
        then:
        - ${mqtt}.publish:
            topic: !lambda 'return "device/" + id(bambu_serial_number).state + "/request";'
            # 255 = external ams, TODO: A1,P1,X1 might use different values for AMS
            # 254 = external tray, first filament slot is tray 0
            # payload: !lambda "return bambulabs::generate_mqtt_payload( id(filament_raw_data0).state, 255, 254 );"
            payload: !lambda "return bambulabs::generate_mqtt_payload( id(filament_raw_data0).state, id(global_tap_counter) == 5 ? 255 : 0, id(global_tap_counter) == 5 ? 254: id(global_tap_counter) - 1 );"
        - lambda: 'id(filament_raw_data0).publish_state("");'
    - globals.set: 
        id: global_error
        value: 'false'


  on_tag:
    then:
    - binary_sensor.template.publish:
        id: nfc_tag_present0
        state: ON
    - lambda: |-
        bool is_valid_openspool = false;
        id(global_error) = false;
        std::string payload;

        if (tag.has_ndef_message()) {
          auto records = tag.get_ndef_message()->get_records();
          bool found_json = false;

          // Look for application/json record
          for (const auto& record : records) {
            if (record->get_type() == "application/json") {
              if (found_json) {
                // More than one JSON record found
                ESP_LOGW("NFC", "Multiple JSON records found, using first one");
                break;
              }

              payload = record->get_payload();
              ESP_LOGD("NFC", "Payload: %s", payload.c_str());
              id(filament_raw_data0).publish_state(payload);

              // Parse JSON and check for OpenSpool protocol
              auto parse_result = json::parse_json(payload, [&](JsonObject root) {
                is_valid_openspool = root["protocol"] == "openspool";
                return true;
              });

              if (!parse_result) {
                ESP_LOGE("NFC", "Failed to parse JSON payload");
              }

              found_json = true;
            }
          }

          if (!found_json) {
            ESP_LOGW("NFC", "No application/json record found");
          }
        } else {
          ESP_LOGI("NFC", "Tag found without NDEF message");
        }

        // Update states
        id(rfid_reader_spi_0_tag_parsed).publish_state(true);
        id(rfid_reader_spi_0_tag_is_openspool).publish_state(is_valid_openspool);

        // Set LED color
        if (is_valid_openspool) {
          id(tap_timer).start_poller();
          id(global_tap_counter) = 0;
          //TODO: Generate and send MQTT message here
          if (!payload.empty()) {
          }
        } else {
          id(tap_timer).stop_poller();
          id(tap_timer).setup();
          id(global_error) = true;
          for(int i = 0; i < 4; i++) {
            id(set_led_red).execute(i);
          }
        }
    # - if:
    #     condition:
    #       and:
    #       - ${mqtt}.connected
    #       - lambda: 'return id(filament_raw_data0).state != "";'
    #       - lambda: 'return id(filament_raw_data0).state != "{}";'
    #       - binary_sensor.is_on: rfid_reader_spi_0_tag_is_openspool
    #       - binary_sensor.is_on: rfid_reader_spi_0_tag_parsed
    #     then:
    #     - ${mqtt}.publish:
    #         topic: !lambda 'return "device/" + id(bambu_serial_number).state + "/request";'
    #         # 255 = external ams, TODO: A1,P1,X1 might use different values for AMS
    #         # 254 = external tray, first filament slot is tray 0
    #         payload: !lambda "return bambulabs::generate_mqtt_payload( id(filament_raw_data0).state, 255, 254 );"
text_sensor:
- platform: template
  name: "NFC Raw Data"
  id: filament_raw_data0
  state_topic:
  internal: false # Always show raw data 0
  icon: mdi:nfc-variant
  web_server:
    sorting_group_id: sorting_group_rfid
  filters:
  - lambda: |-
      auto pretty_json = [](const std::string &x) -> std::string {
        if (x.empty()) {
          ESP_LOGD("NFC", "Input string is empty");
          return x;
        }     
        ESP_LOGD("NFC", "Input string: %s", x.c_str());
        
        StaticJsonDocument<1024> doc;  // Use StaticJsonDocument for memory efficiency
        DeserializationError error = deserializeJson(doc, x);
        if (error) {
          ESP_LOGE("NFC", "JSON parsing failed: %s", error.c_str());
          return "";
        }
        
        if (!doc.is<JsonObject>()) {
          ESP_LOGE("NFC", "Invalid JSON: Not an object");
          return "";
        }
        
        const char* required_fields[] = {"protocol", "color_hex", "type", "min_temp", "max_temp", "brand"};
        for (const char* field : required_fields) {
          if (!doc.containsKey(field)) {
            ESP_LOGE("NFC", "Invalid JSON: Missing required field '%s'", field);
            return "";
          }
        }
        
        std::string output;
        serializeJsonPretty(doc, output);
        
        if (output.length() > 1024) {
          ESP_LOGE("NFC", "Prettified JSON exceeds 1024 bytes");
          return "";
        }
        
        return output;
      };
      return pretty_json(x);

- platform: template
  name: "NFC Preview"
  id: nfc_preview
  state_topic:
  icon: mdi:nfc-search-variant
  web_server:
    sorting_group_id: sorting_group_rfid
# Create virtual button that can be pressed in the gui
button:
- platform: template
  name: "Write NFC"
  id: write_nfc
  state_topic:
  icon: mdi:nfc-tap
  web_server:
    sorting_group_id: sorting_group_filament_settings
    sorting_weight: 210
  on_press:
    then:
    - if:
        condition:
          and:
          # - lambda: |- #TODO: I'm not sure that tag_present registers on blank tags
          #     if (!id(nfc_tag_present0).state) {
          #       ESP_LOGE("main", "NFC Tag not present on RFID Reader 0");
          #       return false;
          #     } else {
          #       return true;
          #     }
          - lambda: |-
              if (id(filament_brand).state == "") {
                ESP_LOGE("main", "Filament Brand cannot be empty");
                return false;
              } else {
                return true;
              }
          - lambda: |-
              if (id(filament_brand_code).state == "") {
                ESP_LOGE("main", "Filament Brand Code cannot be empty");
                return false;
              } else {
                return true;
              }
          - lambda: |-
              if (id(filament_color_hex).state == "") {
                ESP_LOGE("main", "Filament Color Hex cannot be empty");
                return false;
              } else {
                return true;
              }
          - lambda: |-
              if (id(filament_max_temp).state > 300) {
                ESP_LOGE("main", "Filament Max Temp must be less than 300");
                return false;
              } else {
                return true;
              }
          - lambda: |-
              if (id(filament_min_temp).state < 150) {
                ESP_LOGE("main", "Filament Min Temp must be greater than 150");
                return false;
              } else {
                return true;
              }
          - lambda: |-
              if (id(filament_min_temp).state > id(filament_max_temp).state) {
                ESP_LOGE("main", "Filament Min Temp must be less than Filament Max Temp");
                return false;
              } else {
                return true;
              }
          - lambda: |-
              if (id(filament_type).state == "") {
                ESP_LOGE("main", "Filament Type cannot be empty");
                return false;
              } else {
                return true;
              }
        then:
        - lambda: |-
            auto message = new nfc::NdefMessage();

            //TODO: uncomment once esphome suppports messages nless than 255 bytes
            // URI NDEF record
            // esphome fails if this is more than 255 bytes
            //auto uri_record = std::make_unique<nfc::NdefRecordUri>();
            //std::string url = "https://openspool.io/tag?";
            //url.append("protocol=").append("openspool");
            //url.append("&version=").append("1.0");
            //url.append("&color_hex=").append(id(filament_color_hex).state);
            //url.append("&type=").append(id(filament_type).state);
            //url.append("&min_temp=").append(std::to_string(static_cast<uint16_t>(id(filament_min_temp).state)));
            //url.append("&max_temp=").append(std::to_string(static_cast<uint16_t>(id(filament_max_temp).state)));
            //url.append("&brand=").append(id(filament_brand).state);

            // Warn if the url is more than 255 bytes
            // While NFC allows messages longer than 255, you have to set the tnf_byte which esphome doesn't allow yet
            //if (url.length() > 255) {
            //  ESP_LOGE("NFC", "URL longer than 255 bytes: %s", url.c_str());
            //  return;
            //}
            //ESP_LOGD("NFC", "Adding NDEF Record URI: %s", url.c_str());
            //message->add_uri_record(url);

            // Application/Json NDEF record
            auto json_record = std::make_unique<nfc::NdefRecord>();
            json_record->set_tnf(nfc::TNF_MIME_MEDIA);
            json_record->set_type("application/json");

            DynamicJsonDocument doc(256);  // Adjust size as needed
            JsonObject root = doc.to<JsonObject>();
            root["version"] = "1.0";
            root["protocol"] = "openspool";
            if (id(filament_include_alpha).state == true){
              root["color_hex"] = id(filament_color_hexaa).state;
            }
            else{
              root["color_hex"] = id(filament_color_hex).state;
            } 
            root["type"] = id(filament_type).state;
            root["min_temp"] = id(filament_min_temp).state;
            root["max_temp"] = id(filament_max_temp).state;
            root["brand"] = id(filament_brand).state;

            std::string json_string;
            serializeJson(root, json_string);
            if (json_string.empty()) {
              ESP_LOGE("rfid", "Failed to serialize JSON");
              return;
            }
            ESP_LOGI("rfid", "JSON content to be written: %s", json_string.c_str());
            json_record->set_payload(json_string);
            message->add_record(std::move(json_record));

            std::vector<uint8_t> encoded_message = message->encode();
            size_t message_size = encoded_message.size();
            ESP_LOGI("rfid", "NDEF message size: %zu bytes", message_size);

            // TODO: make dynamic for NTAG215 (544) or NTAG216 (888)
            // TODO: 544 bytes is actuall 496 usable according to logs
            //const size_t MAX_MESSAGE_SIZE = 496;
            //if (message_size > MAX_MESSAGE_SIZE) {
            //    ESP_LOGE("rfid", "Error: NDEF message size (%zu bytes) exceeds maximum allowed size (%zu bytes)", message_size, MAX_MESSAGE_SIZE);
                //return;  // Exit the function or throw an exception, depending on your error handling strategy
            //}

            id(rfid_reader_spi_0).write_mode(message);
            ESP_LOGI("rfid", "Writing JSON NDEF message to tag");
        - wait_until:
            not:
              pn532.is_writing:
                id: rfid_reader_spi_0
        - logger.log:
            tag: "rfid"
            format: "Finished writing tag"
            level: INFO
        else:
        - lambda: |-
            ESP_LOGI("rfid", "NFC Tag not present");
